package rs.ac.bg.etf.pp1;

import java.util.HashMap;

import org.apache.log4j.Logger;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticAnalyzer extends VisitorAdaptor {

	public static int nVars;
	
	public static Struct booleanType = new Struct(Struct.Bool);
	
	boolean errorDetected = false;
	Logger log=Logger.getLogger(getClass());
	
	private HashMap<Struct,String> klase=new HashMap<>();
	
	private Struct currType=null;
	private Struct natklasaTip=null;
	private String natklasaIme="";
	private Struct potklasaTip=null;
	private String potklasaIme="";
	
	
	public SemanticAnalyzer() {
		Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", booleanType));
	}
	
	
	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	/************************ PROGRAM ******************************/
	public void visit(ProgName progName) {
		//obj.vrsta
		//naziv labele za IDENT programa sto smo stavili u mjparser
		//tab.type
		progName.obj=Tab.insert(Obj.Prog, progName.getProgName(), Tab.noType);
		Tab.openScope();
	}
	
	public void visit(Program program) {
		nVars = Tab.currentScope.getnVars();
		Tab.chainLocalSymbols(program.getProgName().obj);
		Tab.closeScope();
	}
	
	/*********************** TYPE  *************************/
	public void visit(TypeOptDoubleColon type) {
		String tip=type.getTypeName();
		Obj obj=Tab.find(tip);
		if(obj!=Tab.noObj) {
			if(obj.getKind()==Obj.Type) {
				//report_info("Tip: "+tip+" je definisan", type);
				type.struct=obj.getType();
				currType=type.struct;
			}else {
				report_error("GRESKA:Postoji naziv: "+tip+" u tabeli, ali on ne predstavja tip",type);
			}
		}else {
			report_error("GRESKA:Tip sa name-om: "+tip+" nije definisan u nijednom scope-u.", type);
		}
	}
	
	public void visit(TypeBaseNoColon type) {
		String name=type.getTypeName();
		Obj obj=Tab.find(name);
		
		if(obj==Tab.noObj) {
			report_error("GRESKA:Tip sa name-om: "+name+" nije definisan u nijednom scope-u.", type);
		}else {
			if(obj.getKind()==Obj.Type) {
				//report_info("Tip: "+name+" je definisan", type);
				type.struct=obj.getType();
				currType=type.struct;
			}else {
				report_error("GRESKA:Postoji naziv: "+name+" u tabeli, ali on ne predstavja tip",type);
			}
		}
	}
	
	/************************* PROMENJLJIVE *****************************/
	//NUMCONST
	
	public void visit(ConstNum number) {
		number.struct=Tab.intType;
	}
	
	//CharConst
	public void visit(ConstChar charC) {
		charC.struct=Tab.charType;
	}
	
	//BoolConst
	public void visit(ConstBool boolC) {
		boolC.struct=booleanType;// ja sam napravio ovaj simbol i dodao u universe, pa da ne trazim kad je vec lokalno sacuvan
	}
	
	/*Konstavne*/
	//Provera valjanosti tipa i vrednosti
	/**
	 * ConstDecl ::= (ConstDecl) CONST Type IDENT:name EQUALS ConstType ConstDeclTail SEMICOLON;
	 */
	public void visit(ConstDecl cnstDecl) {
		//1. provera da li je konstanta vec deklarisana
		String name=cnstDecl.getName();
		Obj obj=Tab.find(name);
		if(obj!=Tab.noObj) {
			//greska, promenjljiva je deklarisan vec
			report_error("GRESKA:Promenjljiva: "+name+" je vec deklarisan!",cnstDecl);
			return;
		}
		
		//2. provera da li su type i dodeljena vrednost kompatiblni(assignable)
		
		Struct type=cnstDecl.getType().struct; //za struct nema geter nego se to dir. dohvata jer je public
		Struct cnst=cnstDecl.getConstType().struct;
		//currType=type;
		
		if(!cnst.assignableTo(type)) {
			report_error("GRESKA:Tip i vrednost su nekompatibilni!", cnstDecl);
			return;
		}
		
		//Sad je sve u redu, ubacujemo konstantu u tabelu simbola
		
		Obj objInsert=Tab.insert(Obj.Con,name,type);
		report_info("Definisana je konstanta: "+name, cnstDecl);
		
		ConstType ct = cnstDecl.getConstType();
    	
    	if (ct.getClass() == ConstNum.class) {
    		objInsert.setAdr(((ConstNum) ct).getVal());
    	} else if (ct.getClass() == ConstChar.class) {
    		objInsert.setAdr(((ConstChar) ct).getVal());
    	} else if (ct.getClass() == ConstBool.class) {
    		objInsert.setAdr(((ConstBool) ct).getVal() == true ? 1 : 0);
    	}
		
	}
	
	public void visit(ConstDeclHead cnstDecl) {
		String name=cnstDecl.getName();
		Obj obj=Tab.find(name);
		
		//1. provera da li je konstanta vec deklarisana
		if(obj!=Tab.noObj) {
			//greska, promenjljiva je deklarisan vec
			report_error("GRESKA:Promenjljiva: "+name+" je vec deklarisan!",cnstDecl);
			return;
		}
		
		//2. provera da li su type i dodeljena vrednost kompatiblni(assignable)
		Struct cnstType=cnstDecl.getConstType().struct;
		
		if(!cnstType.assignableTo(currType)) {
			report_error("GRESKA:Tip i vrednost su nekompatibilni!", cnstDecl);
			return;
		}
		
		Obj objInsert=Tab.insert(Obj.Con,name,cnstType);
		report_info("Definisana je konstanta: "+name, cnstDecl);
		
		ConstType ct = cnstDecl.getConstType();
    	
    	if (ct.getClass() == ConstNum.class) {
    		objInsert.setAdr(((ConstNum) ct).getVal());
    		//report_info("Definisana je konstanta: "+name+"ADR: "+obj.getAdr(), cnstDecl);
    	} else if (ct.getClass() == ConstChar.class) {
    		objInsert.setAdr(((ConstChar) ct).getVal());
    	} else if (ct.getClass() == ConstBool.class) {
    		objInsert.setAdr(((ConstBool) ct).getVal() == true ? 1 : 0);
    	}
			
	}
	
	/*Vars*/
	
	//globalne
	/**
	 * VarDecl ::= (VarDecl) Type NewVarDecl OptionalVarDeclList SEMICOLON;

	   NewVarDecl ::= (VarDeclIdent) IDENT:name AdditionalSquare;
	 */
	public void visit(VarDecl varDecl) {
		String name=((VarDeclIdent)varDecl.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Globalna promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",varDecl);
			return;
		}
		
		String tip=((VarDeclIdent)varDecl.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Globalna promenljiva: "+name+" je dodata u tabelu simbola.", varDecl);
			Tab.insert(Obj.Var, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Globalna promenjliva tipa niz: "+name+" je dodata u tableu simbola.",varDecl);
			Tab.insert(Obj.Var, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", varDecl);
		}
		
		return;
	}
	
	public void visit(AdditionalS addit) {
		addit.obj=new Obj(-1, "[]", null);
	}
	public void visit(NoAdditionalS noAddit) {
		noAddit.obj=new Obj(-1,"epsilon",null);
	}
	
	/**
	 * 
	 * OptionalVarDeclList ::= (OptionalVarList) OptionalVarDeclList COMMA NewVarDecl
	*					|
	*					(NoOptionalVarList) \/*epsilon*\/
	*					
	 * 
	 */
	
	public void visit(OptionalVarList ovarDecl) {
		String name=((VarDeclIdent)ovarDecl.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Globalna promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",ovarDecl);
			return;
		}
		
		String tip=((VarDeclIdent)ovarDecl.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Globalna promenljiva: "+name+" je dodata u tabelu simbola.", ovarDecl);
			Tab.insert(Obj.Var, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Globalna promenjliva tipa niz: "+name+" je dodata u tableu simbola.",ovarDecl);
			Tab.insert(Obj.Var, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", ovarDecl);
		}
		
		return;
	}
	
	//class
	public void visit(VarDeclClass varClass) {
		String name=((VarDeclIdent)varClass.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",varClass);
			return;
		}
		
		String tip=((VarDeclIdent)varClass.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Promenljiva: "+name+" je dodata u tabelu simbola.", varClass);
			Tab.insert(Obj.Fld, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Promenjliva tipa niz: "+name+" je dodata u tableu simbola.",varClass);
			Tab.insert(Obj.Fld, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", varClass);
		}
		
		return;
	}
	
	public void visit(OptionalVarListClass ovarClass) {
		String name=((VarDeclIdent)ovarClass.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",ovarClass);
			return;
		}
		
		String tip=((VarDeclIdent)ovarClass.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Promenljiva: "+name+" je dodata u tabelu simbola.", ovarClass);
			Tab.insert(Obj.Fld, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Promenjliva tipa niz: "+name+" je dodata u tableu simbola.",ovarClass);
			Tab.insert(Obj.Fld, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", ovarClass);
		}
		
		return;
	}
	
	
	
	//lokalne promenjljive u metodima
	/**
	 * 
	 * VarDeclMeth ::= (VarDeclMeth) Type NewVarDecl OptionalVarDeclListMeth SEMICOLON;
	OptionalVarDeclListMeth ::= (OptionalVarListMeth) OptionalVarDeclListMeth COMMA NewVarDecl
						|
						(NoOptionalVarListMeth) \/*epsilon*\/
						;
	 * 
	 */
	
	public void visit(VarDeclMeth varMeth) {
		String name=((VarDeclIdent)varMeth.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",varMeth);
			return;
		}
		
		String tip=((VarDeclIdent)varMeth.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Promenljiva: "+name+" je dodata u tabelu simbola.", varMeth);
			Tab.insert(Obj.Var, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Promenjliva tipa niz: "+name+" je dodata u tableu simbola.",varMeth);
			Tab.insert(Obj.Var, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", varMeth);
		}
		
		return;
	}
	
	public void visit(OptionalVarListMeth ovarMeth) {
		String name=((VarDeclIdent)ovarMeth.getNewVarDecl()).getName();
		Obj obj=Tab.find(name);
		//ako se promenjljiva sa istim imenom nalazi vec deklarisana ovde, onda je to greska
		if(obj!=Tab.noObj && Tab.currentScope.findSymbol(name)!=null) {
			report_error("GRESKA:Promenljiva sa nazivom: "+name+" je vec deklarisana u currentScope-u.",ovarMeth);
			return;
		}
		
		String tip=((VarDeclIdent)ovarMeth.getNewVarDecl()).getAdditionalSquare().obj.getName();
		if("epsilon".equals(tip)) {
			report_info("Promenljiva: "+name+" je dodata u tabelu simbola.", ovarMeth);
			Tab.insert(Obj.Var, name, currType);
		}else if("[]".equals(tip)) {
			report_info("Promenjliva tipa niz: "+name+" je dodata u tableu simbola.",ovarMeth);
			Tab.insert(Obj.Var, name, new Struct(Struct.Array,currType));
		}else {
			report_error("Desia se greska promenjliva nije ni niz ni obicna.", ovarMeth);
		}
		
		return;
	}
	
	//ostalo je staticke metoe i metode namespace da se implementiraju(za namespace treba dodatno ispraviti mjparser)
	
	/*********************CLASS DECL ********************************/
	/**
	 * ClassDecl ::= (ClassDeclaration) CLASS IDENT:name AdditionalExtends LBRACE ClassBody RBRACE;
	 * AdditionalExtends ::= (AdditionalExtend) EXTENDS Type:type
					  |
					  (NoAdditionalExtend) \/*epsilon*\/
					  ;
	 */
	
	public void visit(ClassDeclBegin classDecl) {
		String name=classDecl.getName();
		
		Obj classExists=Tab.find(name);
		
		if(classExists!=Tab.noObj) {
			report_error("Vec je deklarisana klasa sa imenom: "+name,classDecl);
			return;
		}
		
		natklasaTip=classDecl.getAdditionalExtends().struct;
		
		natklasaIme=klase.getOrDefault(natklasaTip, null);
		potklasaIme=name;
		//potklasaTip=new Struct(Struct.Class,natklasaTip);-zamena
		potklasaTip=new Struct(Struct.Class);
		potklasaTip.setElementType(natklasaTip);
		report_info("Dodata KLASA: "+name+" u tabelu simbola", classDecl);
		classDecl.obj=Tab.insert(Obj.Type, name, potklasaTip);
		Tab.openScope();
		
		if(natklasaTip!=null) {
			//ako postoji natklasa
			String extensionType=((TypeBaseNoColon)((AdditionalExtend)classDecl.getAdditionalExtends()).getType()).getTypeName();
			Obj extType=Tab.find(extensionType);
			
			if(extType==Tab.noObj) {
				//ako ne postoji zadati indentifikator, to znaci da tip jos uvek nije definisan
				report_error("Ne postoji natklasa sa imenom: "+ name, classDecl);
				return;
			}else {
				if(klase.getOrDefault(extType.getType(), null)==null) {
					report_error("Ne postoji zadata natklasa,ona je neki drugi tip, ane klasa",classDecl);
					return;
				}
			}		
		}
		
		if(natklasaTip!=null) {
			for(Obj obj:natklasaTip.getMembers()) {
				if(obj.getName().equals(natklasaIme)) {
					continue;
				}
				if(obj.getKind()==Obj.Fld) {
					Tab.insert(Obj.Fld, obj.getName(), obj.getType());
				}else if(obj.getKind()==Obj.Meth) {
					//!!!!!!!!!!!!!!!treba jos neki uslovi kasnije da se dodaju ovde !!!!!!!!!!!
					Tab.insert(Obj.Meth, obj.getName(), obj.getType());
				}
			}
		}
		
		
	}
	
	public void visit(ClassDeclaration classDecl) {
		
		//!!!!!!!!!!vrv ovde treba dodati provere i ubacivanje statickih polja!!!!!!
		klase.put(potklasaTip, potklasaIme);
		Tab.chainLocalSymbols(potklasaTip);
		Tab.closeScope();
		potklasaIme="";
		natklasaIme="";
		potklasaTip=null;
		natklasaTip=null;
	    
	}
	
	public void visit(AdditionalExtend ae) {
		ae.struct=ae.getType().struct;
	}
	
	public void visit(NoAdditionalExtend nae) {
		nae.struct=null;
	}
	
	/**************************METODE*******************/
	//globalna deklaracija Metoda
	public void visit(TypeOpt type) {
		//String name=
	}
	//deklaracija Metoda
	
	public boolean passed(){
    	return !errorDetected;
    }
}
